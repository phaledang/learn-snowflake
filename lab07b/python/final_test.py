#!/usr/bin/env python3
"""
Final comprehensive test of the improved connection string functionality
"""
import os
import sys
from dotenv import load_dotenv

# Add current directory to path for imports
sys.path.append(os.path.dirname(__file__))
from snowflake_connection import get_snowflake_connection, get_connection_info

def main():
    """Comprehensive test of connection functionality"""
    load_dotenv()
    
    print("üöÄ SNOWFLAKE CONNECTION STRING - FINAL TEST")
    print("=" * 60)
    
    print("\nüìã Connection Configuration:")
    config = get_connection_info()
    for key, value in config.items():
        print(f"  {key}: {value}")
    
    print(f"\nüîó Using Connection String: {os.getenv('SNOWFLAKE_CONNECTION_STRING', 'Not set')}")
    
    try:
        print("\nüì° Establishing connection...")
        conn = get_snowflake_connection()
        cursor = conn.cursor()
        
        # Test connection info
        cursor.execute("SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_DATABASE(), CURRENT_SCHEMA(), CURRENT_WAREHOUSE(), CURRENT_ACCOUNT_NAME()")
        result = cursor.fetchone()
        
        print("\n‚úÖ CONNECTION SUCCESSFUL!")
        print(f"  üë§ User: {result[0]}")
        print(f"  üé≠ Role: {result[1]}")
        print(f"  üóÑÔ∏è  Database: {result[2]}")
        print(f"  üìä Schema: {result[3]}")
        print(f"  üè≠ Warehouse: {result[4]}")
        print(f"  üè¢ Account: {result[5]}")
        
        # Test employee data query
        print("\nüë• EMPLOYEE DATA TEST:")
        cursor.execute("SELECT ID, NAME, DEPARTMENT, SALARY FROM EMPLOYEES ORDER BY ID")
        employees = cursor.fetchall()
        
        print(f"  üìà Total Employees: {len(employees)}")
        print("  üìù Sample Data:")
        for emp in employees[:3]:  # Show first 3
            print(f"    ‚Ä¢ {emp[1]} ({emp[2]}) - ${emp[3]:,}")
        if len(employees) > 3:
            print(f"    ... and {len(employees) - 3} more employees")
        
        # Test departments
        print("\nüèõÔ∏è DEPARTMENT SUMMARY:")
        cursor.execute("""
            SELECT DEPARTMENT, COUNT(*) as count, AVG(SALARY) as avg_salary
            FROM EMPLOYEES 
            GROUP BY DEPARTMENT 
            ORDER BY count DESC
        """)
        departments = cursor.fetchall()
        
        for dept in departments:
            print(f"  ‚Ä¢ {dept[0]}: {dept[1]} employees, avg ${dept[2]:,.0f}")
        
        cursor.close()
        
        print("\nüéâ ALL TESTS PASSED!")
        print("\nüìã FEATURES IMPLEMENTED:")
        print("  ‚úÖ Connection string support (SNOWFLAKE_CONNECTION_STRING)")
        print("  ‚úÖ Individual environment variables support")
        print("  ‚úÖ Automatic account format normalization")
        print("  ‚úÖ Support for both .snowflakecomputing.com and short formats")
        print("  ‚úÖ Automatic fallback to multiple account format variations")
        print("  ‚úÖ Real Snowflake data queries")
        print("  ‚úÖ FastAPI server integration ready")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Connection failed: {e}")
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        print(f"\nüöÄ READY FOR PRODUCTION!")
        print("You can now use:")
        print("  ‚Ä¢ Connection string format in .env")
        print("  ‚Ä¢ Individual environment variables")
        print("  ‚Ä¢ Both work with any account format")
        print("  ‚Ä¢ API server with real Snowflake data")
        print("\nüí° To test the API server:")
        print("  python python/simple_api_server.py")
        print("  Then visit: http://localhost:8000/docs")
    else:
        print(f"\nüõë Please check your configuration and try again.")